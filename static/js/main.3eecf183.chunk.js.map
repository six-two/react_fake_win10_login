{"version":3,"sources":["img/background.jpg","img/user.png","serviceWorker.ts","app/redux/reducer.ts","app/redux/constants.ts","app/redux/reducers/login.ts","app/redux/store.ts","app/redux/actions.ts","app/FullscreenManager.tsx","app/Images.tsx","app/win10/ScreenLogin.tsx","app/win10/login/LockedScreen.tsx","app/VerifyCredentials.ts","app/win10/login/PasswordDialog.tsx","app/win10/ScreenManager.tsx","app/setup/Setting.tsx","app/setup/Types.tsx","app/setup/SettingInfos.ts","app/setup/State.ts","app/setup/Setup.tsx","app/App.tsx","index.tsx"],"names":["module","exports","Boolean","window","location","hostname","match","reducer","state","action","console","warn","FALLBACK_STATE","type","constants","payload","const","var","setScreen","initialScreen","DEFAULT_VARIABLES","isSetupDone","fullscreen","requested","isFullscreenActive","active","value","varReducer","screen","name","miscReducer","login","username","password","revealPassword","success","copy","failed","attempts","isFinished","loginReducer","newScreen","previousScreen","changeTime","Date","DEFAULT_CONSTANTS","checkLoginCredentialsUrl","checkDecryptionPasswordUrl","validLoginUsernameRegex","RegExp","validLoginPasswordRegex","validDecryptionPasswordRegex","serverRequestTimeout","coverUrl","coverFakeUrl","coverFakeTitle","openMenu","devTools","undefined","__REDUX_DEVTOOLS_EXTENSION__","trace","traceLimit","store","createStore","d","dispatch","toggleRevealPassword","setLoginOpenMenu","newValue","onHistoryPopState","setupIsDone","FullscreenManager","props","showContents","this","isFullscreen","alwaysShowContents","handleKeys","handleFocusableElements","onKeyEvent","enabled","requestFullscreen","onChange","children","Component","ReduxFullscreenManager","connect","ownProps","NOT_INLINED_IMAGES","imageBackground","iconUser","filter","src","startsWith","renderImage","key","alt","PreloadImages","className","map","ScreenLogin","closeMenu","isMenuOpen","onClick","React","ReduxScreenLogin","format","a","url","timeout","resolveWithTimeout","checkCredentialsViaServer","serverResponse","sleep","validUsername","validPassword","log","promise","timeoutSeconds","timeoutMillis","Math","round","TimeoutError","info","error","urlTemplate","replace","http","response","isValid","fetch","ok","statusText","json","body","ms","Promise","resolve","setTimeout","ReduxLoginDialog","failedLogin","reduxState","showRevealButton","doLogin","e","isLoginValid","then","target","placeholder","autoFocus","autoComplete","role","aria-label","preventContextMenu","ScreenManager","onContextMenu","renderContent","LockedScreen","PasswordDialog","style","color","ReduxScreenManager","Setting","hasErrorClass","errorMessage","title","description","canBeEmpty","allowsEmptyInput","checkInput","number","Number","isNaN","checkTimingStringForErrors","placeholders","push","urlText","URL","p","indexOf","checkUrlForPlaceholders","checkRegex","FIELDS_TIMING","FIELDS_GENERAL","FIELDS_CREDENTIAL_SERVER","FIELDS_CREDENTIAL_LOCAL","ALL_SETTINGS","SETTINGS_MAP","Map","s","set","asSettings","fromStringOrNull","fromRegex","source","stringOrNull","DEFAULT_SETTINGS","App","ReduxApp","isRunning","showSetup","addEventListener","event","stage","JSON","stringify","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.3eecf183.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/background.0099788b.jpg\";","module.exports = __webpack_public_path__ + \"static/media/user.b34dc68a.png\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as Actions from './actions';\nimport * as C from './constants';\nimport {\n  ReduxState, ReduxVariables, ReduxConstants, FALLBACK_STATE, DEFAULT_VARIABLES\n} from './store';\nimport loginReducer from './reducers/login';\n\nexport function reducer(state: ReduxState | undefined, action: Actions.Action): ReduxState {\n  if (!state) {\n    console.warn(\"No state was supplied to reducer. Falling back to default values\");\n    state = FALLBACK_STATE;\n  }\n\n  // This is the only event that is allowed to change the ReduxConstants\n  switch (action.type) {\n    case C.INITIAL_SETUP: {\n      let constants = action.payload as ReduxConstants;\n      let vars = setScreen(constants.initialScreen, DEFAULT_VARIABLES, constants);\n      return {\n        const: constants,\n        var: vars,\n        isSetupDone: true,\n        fullscreen: {\n          ...state.fullscreen,\n          requested: true,\n        },\n      };\n    }\n    case C.SET_SETUP_DONE: {\n      let isSetupDone = action.payload as boolean;\n      return {\n        ...state,\n        isSetupDone: isSetupDone,\n      };\n    }\n    case C.SET_FULLSCREEN_IS_ACTIVE: {\n      let isFullscreenActive = action.payload as boolean;\n      return {\n        ...state,\n        fullscreen: {\n          requested: isFullscreenActive,//reset it so it can be set again later\n          active: isFullscreenActive,\n        },\n      }\n    }\n    case C.SET_FULLSCREEN_IS_REQUESTED: {\n      let value = action.payload as boolean;\n      return {\n        ...state,\n        fullscreen: {\n          ...state.fullscreen,\n          requested: value,\n        },\n      }\n    }\n    default: {\n      return {\n        ...state,\n        var: varReducer(state.var, action, state.const),\n      };\n    }\n  }\n}\n\n\nfunction varReducer(state: ReduxVariables, action: Actions.Action, constants: ReduxConstants): ReduxVariables {\n  state = loginReducer(state, action);\n  state = miscReducer(state, action, constants);\n  return state;\n}\n\nfunction miscReducer(state: ReduxVariables, action: Actions.Action, constants: ReduxConstants): ReduxVariables {\n  switch (action.type) {\n    case C.SET_SCREEN: {\n      let newScreen = action.payload as string;\n      return setScreen(newScreen, state, constants);\n    }\n    case C.RESET_STATE: {\n      return setScreen(DEFAULT_VARIABLES.screen.name, DEFAULT_VARIABLES, constants);\n    }\n  }\n  return state;\n}\n\nexport function setScreen(newScreen: string, state: ReduxVariables, constants: ReduxConstants): ReduxVariables {\n  // Handle suspend and cover\n  let needsPreviousScreen = newScreen === C.SCREEN_SUSPEND || newScreen === C.SCREEN_COVER;\n  let previousScreen = needsPreviousScreen ? state.screen.name : null;\n\n  return {\n    ...state,\n    screen: {\n      name: newScreen,\n      changeTime: new Date(),\n    },\n    previousScreen: previousScreen,\n  };\n}\n\nexport default reducer;\n","export const DEBUG = true;\n\nexport const MARKER_CAN_BE_LEFT_EMPTY = \"*\";\n\nexport const PLACEHOLDER_USERNAME = \"<username>\";\nexport const PLACEHOLDER_PASSWORD = \"<password>\";\n\n// action types\nexport const SET_FULLSCREEN_IS_REQUESTED = \"SET_FULLSCREEN_IS_REQUESTED\";\nexport const SET_FULLSCREEN_IS_ACTIVE = \"SET_FULLSCREEN_IS_ACTIVE\";\nexport const SET_LOGIN_USERNAME = \"SET_LOGIN_USERNAME\";\nexport const SET_LOGIN_PASSWORD = \"SET_LOGIN_PASSWORD\";\nexport const SET_SCREEN = \"SET_SCREEN\";\nexport const SET_HOSTNAME = \"SET_HOSTNAME\";\nexport const SET_LOGIN_OPEN_MENU = \"SET_LOGIN_OPEN_MENU\";\nexport const TOGGLE_REVEAL_PASSWORD = \"TOGGLE_REVEAL_PASSWORD\";\nexport const TRY_LOGIN = \"TRY_LOGIN\";\nexport const RESET_STATE = \"RESET_STATE\";\nexport const INITIAL_SETUP = \"INITIAL_SETUP\";\nexport const SET_SETUP_DONE = \"SET_SETUP_DONE\";//should only be used for browser history\n\n// power related screen\nexport const SCREEN_OFF = \"SCREEN_OFF\";\nexport const SCREEN_SUSPEND = \"SCREEN_SUSPEND\";\n// normal screens\nexport const SCREEN_LOCKED = \"SCREEN_LOCKED\";\nexport const SCREEN_LOGIN = \"SCREEN_LOGIN\";\nexport const SCREEN_PASSWORD_RESET = \"SCREEN_PASSWORD_RESET\";\n//\nexport const SCREEN_COVER = \"SCREEN_COVER\";\n\n// input types\nexport const TYPE_STRING = \"TYPE_STRING\";\nexport const TYPE_STRING_OR_NULL = \"TYPE_STRING_OR_NULL\";\nexport const TYPE_TIMEOUT = \"TYPE_TIMEOUT\";\nexport const TYPE_TIMEOUT_OR_NULL = \"TYPE_TIMEOUT_OR_NULL\";\nexport const TYPE_INITIAL_SCREEN = \"TYPE_INITIAL_SCREEN\";\nexport const TYPE_REGEX = \"TYPE_REGEX\";\nexport const TYPE_TEMPLATE_URL_PASS = \"TYPE_TEMPLATE_URL_PASS\";\nexport const TYPE_TEMPLATE_URL_USER_PASS = \"TYPE_TEMPLATE_URL_USER_PASS\";\n","import * as Actions from '../actions';\nimport * as C from '../constants';\nimport { ReduxVariables } from '../store';\n\n\nexport default function reducer(state: ReduxVariables, action: Actions.Action): ReduxVariables {\n  switch (action.type) {\n    case C.SET_LOGIN_USERNAME: {\n      let payload = action.payload as string;\n      return {\n        ...state,\n        login: {\n          ...state.login,\n          username: payload,\n        },\n      };\n    }\n    case C.SET_LOGIN_PASSWORD: {\n      let payload = action.payload as string;\n      return {\n        ...state,\n        login: {\n          ...state.login,\n          password: payload,\n        },\n      };\n    }\n    case C.TOGGLE_REVEAL_PASSWORD: {\n      return {\n        ...state,\n        login: {\n          ...state.login,\n          revealPassword: !state.login.revealPassword,\n        },\n      };\n    }\n    case C.TRY_LOGIN: {\n      let success = action.payload as boolean;\n      const copy = {\n        ...state,\n        login: {\n          ...state.login,\n          revealPassword: false,\n          failed: !success,\n          attempts: state.login.attempts + 1,\n        },\n        isFinished: success,\n      };\n      if (!success) {\n        // Clear password\n        copy.login.password = '';\n      }\n      return copy;\n    }\n    default:\n      return state;\n  }\n}\n","import { createStore } from 'redux';\nimport { reducer } from './reducer';\nimport * as C from './constants';\n\nexport interface ReduxState {\n  const: ReduxConstants,\n  var: ReduxVariables,\n  isSetupDone: boolean,\n  fullscreen: {\n    requested: boolean,\n    active: boolean,\n  },\n}\n\n// The settings that can be set by the user before the simulation is started\n// They will not change over the course of the simulation\nexport interface ReduxConstants {\n  initialScreen: string,\n  // urls for logging / checking credentials\n  checkLoginCredentialsUrl: string | null,\n  checkDecryptionPasswordUrl: string | null,\n  serverRequestTimeout: number,\n  // local validation\n  validLoginUsernameRegex: RegExp,\n  validLoginPasswordRegex: RegExp,\n  validDecryptionPasswordRegex: RegExp,\n  // cover\n  coverUrl: string,\n  coverFakeUrl: string,\n  coverFakeTitle: string,\n}\n\nexport const DEFAULT_CONSTANTS: ReduxConstants = {\n  //password stuff\n  checkLoginCredentialsUrl: \"http://localhost:3333/login.json?u=<username>&p=<password>\",\n  checkDecryptionPasswordUrl: \"http://localhost:3333/disk.json?p=<password>\",\n  validLoginUsernameRegex: RegExp(\"^.+$\"),//anything except empty string\n  validLoginPasswordRegex: RegExp(\"^.+$\"),\n  validDecryptionPasswordRegex: RegExp(\"^$\"),//empty string\n  serverRequestTimeout: 2.0,\n  initialScreen: C.SCREEN_LOGIN,\n  //cover\n  coverUrl: \"https://www.google.com/webhp?igu=1\",\n  coverFakeUrl: \"/www.google.com\",\n  coverFakeTitle: \"Google\",\n}\n\n// The variables or \"state\" of the simulation.\n// Will be reset on reboot.\nexport interface ReduxVariables {\n  screen: {\n    name: string,\n    changeTime: Date,\n  },\n  login: {\n    revealPassword: boolean,\n    username: string,\n    password: string,\n    openMenu: string | null,\n    failed: boolean,\n    attempts: number,\n  },\n  previousScreen: string | null,\n  isFinished: boolean,\n}\n\nexport const DEFAULT_VARIABLES = {\n  screen: {\n    name: C.SCREEN_LOCKED,\n    changeTime: new Date(),\n  },\n  login: {\n    revealPassword: false,\n    username: \"\",\n    password: \"\",\n    openMenu: null,\n    failed: false,\n    attempts: 0,\n  },\n  previousScreen: null,\n  isFinished: false,\n}\n\nexport const FALLBACK_STATE: ReduxState = {\n  const: DEFAULT_CONSTANTS,\n  var: DEFAULT_VARIABLES,\n  isSetupDone: false,\n  fullscreen: {\n    requested: false,\n    active: false,\n  }\n}\n\nlet devTools = undefined;\nif ((window as any).__REDUX_DEVTOOLS_EXTENSION__) {\n  // Redux dev tools are available\n  let devToolOptions = {\n    trace: false,\n    traceLimit: 25\n  };\n  devTools = (window as any).__REDUX_DEVTOOLS_EXTENSION__(devToolOptions);\n}\n\nexport const store = createStore(reducer, FALLBACK_STATE, devTools);\n\n// if (C.DEBUG) {\n//   store.dispatch({\n//     type: C.INITIAL_SETUP,\n//     payload: {\n//       ...DEFAULT_CONSTANTS,\n//       initialScreen: C.SCREEN_PLYMOUTH_PASSWORD,\n//       cryptDevice: \"sdXY_crypt\",\n//       plymountDuration: 4,\n//       checkDecryptionPasswordUrl: null,\n//     },\n//   });\n// }\n\nexport default store;\n","//Needs to be here to prevent cyclic references\nimport store, { ReduxConstants } from './store';\nimport * as C from './constants';\n\nfunction d(action: Action) {\n  store.dispatch(action);\n}\n\nexport interface Action {\n  type: string,\n  payload?: string | number | boolean | ReduxConstants | null,\n};\n\n// action creators\nexport function requestFullscreen(newValue: boolean) {\n  d({\n    type: C.SET_FULLSCREEN_IS_REQUESTED,\n    payload: newValue,\n  });\n}\n\nexport function setIsFullscreenActive(newValue: boolean) {\n  d({\n    type: C.SET_FULLSCREEN_IS_ACTIVE,\n    payload: newValue,\n  });\n}\n\nexport function setLoginUsername(newValue: string) {\n  d({\n    type: C.SET_LOGIN_USERNAME,\n    payload: newValue,\n  });\n}\n\nexport function setLoginPassword(newValue: string) {\n  d({\n    type: C.SET_LOGIN_PASSWORD,\n    payload: newValue,\n  });\n}\n\nexport function tryLogin(success: boolean) {\n  d({\n    type: C.TRY_LOGIN,\n    payload: success,\n  });\n}\n\nexport function toggleRevealPassword() {\n  d({\n    type: C.TOGGLE_REVEAL_PASSWORD,\n  });\n}\n\nexport function setLoginOpenMenu(newValue: string | null) {\n  d({\n    type: C.SET_LOGIN_OPEN_MENU,\n    payload: newValue,\n  });\n}\n\nexport function setScreen(newValue: string) {\n  d({\n    type: C.SET_SCREEN,\n    payload: newValue,\n  });\n}\n\nexport function initialSetup(constants: ReduxConstants) {\n  document.title = constants.coverFakeTitle;\n  window.history.pushState({ stage: \"simulation\" }, \"\", constants.coverFakeUrl);\n\n  d({\n    type: C.INITIAL_SETUP,\n    payload: constants,\n  });\n}\n\nexport function resetState() {\n  d({ type: C.RESET_STATE });\n}\n\nexport function onHistoryPopState(setupIsDone: boolean) {\n  d({ type: C.SET_SETUP_DONE, payload: setupIsDone });\n}\n","import React, { Component } from \"react\";\nimport Fullscreen from \"react-full-screen\";\nimport KeyboardEventHandler from 'react-keyboard-event-handler';\nimport { connect } from 'react-redux';\nimport { ReduxState } from './redux/store';\nimport { setIsFullscreenActive, requestFullscreen } from './redux/actions';\n\n\nclass FullscreenManager extends Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      // isFullscreen: true,\n    };\n  }\n\n  // requestFullscreen = () => {\n  //   this.setState({ isFullscreen: true });\n  // }\n\n  render() {\n    let showContents = this.props.isFullscreen;\n    if (this.props.alwaysShowContents === true) {\n      showContents = true;\n    }\n    return (\n      <div>\n        <KeyboardEventHandler handleKeys={[\"ctrl+space\"]} handleFocusableElements\n          onKeyEvent={() => requestFullscreen(true)} />\n\n        <Fullscreen\n          enabled={this.props.requestFullscreen}\n          onChange={isFullscreen => setIsFullscreenActive(isFullscreen)}\n        >\n          {showContents && this.props.children}\n        </Fullscreen>\n      </div>\n    );\n  }\n}\n\ninterface Props {\n  alwaysShowContents?: boolean,\n  requestFullscreen: boolean,\n  isFullscreen: boolean,\n}\n\ninterface State {\n  // isFullscreen: boolean;\n}\n\n// export default FullscreenManager;\nconst mapStateToProps = (state: ReduxState, ownProps: any) => {\n  return {\n    ...ownProps,\n    requestFullscreen: state.fullscreen.requested,\n    isFullscreen: state.fullscreen.active,\n  };\n};\n\nconst ReduxFullscreenManager = connect(mapStateToProps)(FullscreenManager);\nexport default ReduxFullscreenManager;\n","import React from 'react';\n\nimport imageBackground from '../img/background.jpg';\nimport iconUser from '../img/user.png';\n\nexport {imageBackground, iconUser};\n\nfunction isNotInlineImage(src: string) {\n  return !src.startsWith(\"data:image\");\n}\n\nconst NOT_INLINED_IMAGES = [imageBackground, iconUser].filter(isNotInlineImage);\n\n\nfunction renderImage(src: string) {\n  return <img key={src} src={src} alt=\"\" />\n}\n\nexport function PreloadImages() {\n  return <div className=\"preload-images\">\n    {NOT_INLINED_IMAGES.map(renderImage)}\n  </div>\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { ReduxState } from '../redux/store';\nimport { setLoginOpenMenu } from '../redux/actions';\nimport { imageBackground } from '../Images';\n\n\nclass ScreenLogin extends React.Component<Props> {\n  render() {\n    return <div className=\"screen-login\">\n      <img className=\"fill-screen\" src={imageBackground} alt=\"\"></img>\n      <div className=\"fill-screen v-flex\" onClick={this.closeMenu}>\n        <div className=\"expand\"></div>\n        {this.props.children}\n        <div className=\"expand v-flex\">\n          <div className=\"expand\"></div>\n          <div className=\"button-bar\">\n            {/* TODO */}\n            Internet, Battery\n          </div>\n        </div>\n      </div>\n    </div>\n  }\n\n  closeMenu = () => {\n    if (this.props.isMenuOpen) {\n      setLoginOpenMenu(null);\n    }\n  }\n}\n\ninterface Props {\n  isMenuOpen: boolean,\n  buttons: any[],\n}\n\nconst mapStateToProps = (state: ReduxState, ownProps: any) => {\n  return {\n    ...ownProps,\n    isMenuOpen: state.var.login.openMenu !== null,\n  };\n};\n\nconst ReduxScreenLogin = connect(mapStateToProps)(ScreenLogin);\nexport default ReduxScreenLogin;\n","import React from 'react';\nimport Clock from 'react-live-clock';\nimport KeyboardEventHandler from 'react-keyboard-event-handler';\nimport * as C from '../../redux/constants';\nimport {setScreen} from '../../redux/actions';\n\n\nconst ScreenLogin = () => {\n    return <div className=\"screen-login-locked v-flex\">\n        <KeyboardEventHandler handleKeys={[\"all\"]} handleFocusableElements\n            onKeyEvent={() => setScreen(C.SCREEN_LOGIN)} />\n\n        <div className=\"expand\"></div>\n        <div className=\"clock\">\n            <div className=\"clock-time\"><Clock format={'HH:mm'} /></div>\n            <div className=\"clock-date\"><Clock format={'dddd, D MMMM'} /></div>\n        </div>\n    </div>\n}\n\nexport default ScreenLogin;\n","import { timeout, TimeoutError } from 'promise-timeout';\nimport { ReduxState } from './redux/store';\nimport * as C from './redux/constants';\n\nconst SLEEP_TIME = 1000;\n\nexport async function isLoginValid(state: ReduxState) {\n  let username = state.var.login.username;\n  let password = state.var.login.password;\n  let url = state.const.checkLoginCredentialsUrl;\n  let timeout = state.const.serverRequestTimeout;\n\n  if (url !== null) {\n    // query the url to check password\n    let serverResponse = await resolveWithTimeout(\n      checkCredentialsViaServer(url, username, password), timeout);\n    if (serverResponse !== null) {\n      // got a valid server response\n      return serverResponse;\n    }\n  } else {\n    // simulete the check time by just waiting a bit\n    await sleep(SLEEP_TIME);\n  }\n  // use regexes to check validity\n  let validUsername = Boolean(username.match(state.const.validLoginUsernameRegex));\n  let validPassword = Boolean(password.match(state.const.validLoginPasswordRegex));\n  console.log(`Comparing login credentials to regex.\\n - validUsername: ${validUsername}\\n - validPassword: ${validPassword}`);\n  return validUsername && validPassword;\n}\n\nasync function resolveWithTimeout(promise: Promise<boolean | null>, timeoutSeconds?: number) {\n  try {\n    if (timeoutSeconds && timeoutSeconds > 0) {\n      let timeoutMillis = Math.round(timeoutSeconds * 1000);\n      return await timeout(promise, timeoutMillis);\n    } else {\n      return await promise;\n    }\n  } catch (err) {\n    if (err instanceof TimeoutError) {\n      console.info(`Promise timed out after ${timeoutSeconds} seconds`);\n    } else {\n      console.error(\"Promise resulted in error:\", err);\n    }\n    return null;\n  }\n}\n\nasync function checkCredentialsViaServer(urlTemplate: string, username: string | null,\n  password: string): Promise<boolean | null> {\n  let url = urlTemplate.replace(C.PLACEHOLDER_PASSWORD, password);\n  if (username !== null) {\n    url = url.replace(C.PLACEHOLDER_USERNAME, username);\n  }\n\n  console.log(`Checking credentials via url: \"${url}\"`)\n  let response = await http<VerifyCredentialsResponse>(url);\n\n  const isValid = response && response.isValid !== undefined ? response.isValid : null;\n  console.log(\"Server response:\", isValid);\n  return isValid;\n}\n\nasync function http<T>(url: string): Promise<T | null> {\n  try {\n    const response = await fetch(url);\n    if (!response.ok) {\n      console.error(`HTTP request failed: url=\"${url}\" response_status: \"${response.statusText}\"`);\n      return null;\n    }\n    const body = await response.json();\n    return body;\n  } catch (error) {\n    console.error(error);\n    return null;\n  }\n}\n\nfunction sleep(ms: number) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\ninterface VerifyCredentialsResponse {\n  isValid: boolean,\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport KeyboardEventHandler from 'react-keyboard-event-handler';\nimport { ReduxState } from '../../redux/store';\nimport { setLoginPassword, tryLogin, setScreen, toggleRevealPassword } from '../../redux/actions';\nimport * as C from '../../redux/constants';\nimport { iconUser } from '../../Images';\nimport { isLoginValid } from '../../VerifyCredentials';\n\n\nconst LoginDialog = (props: Props) => {\n    const type = props.revealPassword ? \"text\" : \"password\";\n    const showRevealButton = props.password && !props.revealPassword;\n    const onPasswordChange = (e: any) => setLoginPassword(e.target.value);\n    const doLogin = (e: any) => {\n        isLoginValid(props.reduxState).then(isValid => tryLogin(isValid));\n    };\n\n    return <div className=\"password-dialog\">\n        <div className=\"user-icon\">\n            <img src={iconUser} alt=\"\"></img>\n        </div>\n        <div className=\"user-name\">\n            <span>TODO: User</span>\n        </div>\n        <KeyboardEventHandler\n            handleKeys={[\"enter\"]}\n            onKeyEvent={doLogin}>\n            <div className=\"password-div h-flex\">\n                <div className=\"password-wrapper h-flex\">\n                    <input\n                        type={type}\n                        value={props.password}\n                        onChange={onPasswordChange}\n                        placeholder=\"Password\"\n                        autoFocus\n                        autoComplete=\"off\" />\n                    {showRevealButton &&\n                        <div className=\"button reveal\" onClick={toggleRevealPassword}>\n                            <span role=\"img\" aria-label=\"show\">👁️</span>\n                        </div>\n                    }\n                </div>\n                <div className=\"button login\" onClick={doLogin}>\n                    <span role=\"img\" aria-label=\"go\">🡢</span>\n                </div>\n            </div>\n        </KeyboardEventHandler>\n        {props.failedLogin &&\n            <div className=\"reset-password\">\n                <span onClick={(e: any) => setScreen(C.SCREEN_PASSWORD_RESET)}>\n                    Reset password\n                </span>\n            </div>\n        }\n    </div>\n}\n\ninterface Props {\n    revealPassword: boolean,\n    password: string,\n    failedLogin: boolean,\n    reduxState: ReduxState,\n}\n\nconst mapStateToProps = (state: ReduxState, ownProps: any) => {\n    return {\n        ...ownProps,\n        revealPassword: false,\n        password: state.var.login.password,\n        failedLogin: state.var.login.failed,\n        reduxState: state,\n    };\n};\n\nconst ReduxLoginDialog = connect(mapStateToProps)(LoginDialog);\nexport default ReduxLoginDialog;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport * as C from '../redux/constants';\nimport { ReduxState } from '../redux/store';\nimport ScreenLogin from './ScreenLogin';\nimport LockedScreen from './login/LockedScreen';\nimport PasswordDialog from './login/PasswordDialog';\n\n\nfunction preventContextMenu(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n  if (!C.DEBUG) {\n    e.preventDefault();\n    e.stopPropagation();\n  }\n}\n\nclass ScreenManager extends React.Component<Props> {\n  render() {\n    return <div className=\"screen-manager fill-screen\" onContextMenu={preventContextMenu}>\n      {this.renderContent()}\n    </div>\n  }\n\n  renderContent() {\n    switch (this.props.screen) {\n      case C.SCREEN_LOCKED:\n        return <ScreenLogin>\n          <LockedScreen />\n        </ScreenLogin>\n      case C.SCREEN_LOGIN:\n        return <ScreenLogin>\n          <PasswordDialog />\n        </ScreenLogin>\n      default:\n        return <h1 style={{ color: \"red\" }}>\n          {`Unknown screen: \"${this.props.screen}\"`}\n        </h1>\n    }\n  }\n}\n\ninterface Props {\n  screen: string,\n}\n\nconst mapStateToProps = (state: ReduxState, ownProps: any) => {\n  return {\n    ...ownProps,\n    screen: state.var.screen.name,\n  };\n};\n\nconst ReduxScreenManager = connect(mapStateToProps)(ScreenManager);\nexport default ReduxScreenManager;\n","import React from 'react';\nimport * as C from '../redux/constants';\n\n\nexport default function Setting(props: Props) {\n  let hasErrorClass = props.errorMessage ? \" has-error\" : \"\";\n  return <div className=\"setting\">\n    <div className=\"label\" title={props.description}>\n      {props.name}\n      {props.canBeEmpty &&\n        <abbr title=\"Leave this field empty to disable this feature\">\n          {C.MARKER_CAN_BE_LEFT_EMPTY}\n        </abbr>\n      }\n    </div>\n    <div className={\"value-and-error\" + hasErrorClass}>\n      <div className=\"value\">\n        {props.children}\n      </div>\n      {props.errorMessage &&\n        <div className=\"error\">\n          {props.errorMessage}\n        </div>\n      }\n    </div>\n  </div>\n}\n\ninterface Props {\n  name: string,\n  errorMessage?: string | null,\n  children: any,\n  canBeEmpty: boolean,\n  description: string,\n}\n","import React from 'react';\nimport * as C from '../redux/constants';\n\nexport interface RenderInputProps {\n  value: string,\n  setValue: (value: string) => void,\n}\n\nexport function allowsEmptyInput(type: string): boolean {\n  if (type === C.TYPE_STRING_OR_NULL || type === C.TYPE_TIMEOUT_OR_NULL\n    || type === C.TYPE_TEMPLATE_URL_PASS || type === C.TYPE_TEMPLATE_URL_USER_PASS) {\n    return true;\n  }\n  return false;\n}\n\nexport function renderInput(type: string, defaultValue: string,\n  value: string, onValueChange: (value: string) => void): JSX.Element {\n  switch (type) {\n    case C.TYPE_REGEX:\n    case C.TYPE_STRING:\n    case C.TYPE_STRING_OR_NULL:\n    case C.TYPE_TIMEOUT:\n    case C.TYPE_TIMEOUT_OR_NULL:\n    case C.TYPE_TEMPLATE_URL_PASS:\n    case C.TYPE_TEMPLATE_URL_USER_PASS: {\n      let onChangeCallback = (e: React.ChangeEvent<HTMLInputElement>) => {\n        onValueChange(e.target.value);\n      }\n      return <input value={value} onChange={onChangeCallback}\n        placeholder={defaultValue} />\n    }\n    default:\n      console.error(`Unknown type: \"${type}\"`)\n      return <div>ERROR: Unknown input type</div>;\n  }\n}\n\nexport function checkInput(type: string, value: string): string | null {\n  if (!allowsEmptyInput(type) && !value) {\n    return \"Empty field is not allowed\";\n  }\n  switch (type) {\n    case C.TYPE_STRING:\n    case C.TYPE_STRING_OR_NULL: {\n      return null;\n    }\n    case C.TYPE_TIMEOUT_OR_NULL:\n    case C.TYPE_TIMEOUT: {\n      if (type === C.TYPE_TIMEOUT_OR_NULL && !value) {\n        return null;\n      }\n      return checkTimingStringForErrors(value);\n    }\n    case C.TYPE_TEMPLATE_URL_PASS:\n    case C.TYPE_TEMPLATE_URL_USER_PASS: {\n      let placeholders = [C.PLACEHOLDER_PASSWORD];\n      if (type === C.TYPE_TEMPLATE_URL_USER_PASS) {\n        placeholders.push(C.PLACEHOLDER_USERNAME);\n      }\n      return checkUrlForPlaceholders(value, placeholders);\n    }\n    case C.TYPE_REGEX: {\n      return checkRegex(value);\n    }\n    default:\n      console.error(`Unknown type: \"${type}\"`)\n      return \"Internal error: unknown type\";\n  }\n}\n\nfunction checkTimingStringForErrors(value: string): string | null {\n  let number = Number(value);\n  if (isNaN(number)) {\n    return \"Not a valid number\";\n  }\n  if (number < 0) {\n    return \"Number can not be negative\";\n  }\n  return null;\n}\n\nfunction checkUrlForPlaceholders(urlText: string, placeholders: string[]) {\n  try {\n    new URL(urlText);\n  } catch (e) {\n    // console.debug(\"This error is probably related to url parsing\", e);\n    return \"Unvalid URL format\";\n  }\n\n  for (let p of placeholders) {\n    if (urlText.indexOf(p) < 0) {\n      return `The url should contain the placeholder \"${p}\"`;\n    }\n  }\n  return null;\n}\n\nfunction checkRegex(value: string): string | null {\n  try {\n    new RegExp(value);\n    return null;\n  } catch (e) {\n    return \"Not a valid regular expression\";\n  }\n}\n","import * as C from '../redux/constants';\n\n\nexport interface SettingsInfo {\n  title: string,\n  name: string,\n  description: string,\n  type: string,\n}\n\nconst HOSTNAME: SettingsInfo = {\n  title: \"Hostname\",\n  name: \"hostname\",\n  description: \"The hostname of the Kali Linux. It is shown on the login screen.\",\n  type: C.TYPE_STRING,\n};\n\nconst GRUB_GREETER_DURATION: SettingsInfo = {\n  title: \"Grub greeting message\",\n  name: \"grubGreetingDuration\",\n  description: \"Defines how long the 'Welcome to GRUB!' message is shown\",\n  type: C.TYPE_TIMEOUT,\n};\n\nconst KERNEL_DURATION: SettingsInfo = {\n  title: \"Kernel load\",\n  name: \"kernelLoadDuration\",\n  description: \"Defines how long to wait after the 'Loading Linux <your_kernel_version_here> ...' line\",\n  type: C.TYPE_TIMEOUT,\n};\n\nconst INITRD_DURATION: SettingsInfo = {\n  title: \"Initial ramdisk load\",\n  name: \"initrdLoadDuration\",\n  description: \"Defines how long to wait after the 'Loading initial ramdisk ...' line\",\n  type: C.TYPE_TIMEOUT,\n};\n\nconst BOOT_LOGO_DURATION: SettingsInfo = {\n  title: \"Kali boot animation\",\n  name: \"plymountDuration\",\n  description: \"Determines how long the boot animation should be shown\",\n  type: C.TYPE_TIMEOUT,\n};\n\nconst SHUTDOWN_LOGO_DURATIION: SettingsInfo = {\n  title: \"Kali logo during shutdown\",\n  name: \"shutdownDuration\",\n  description: \"Sets how long the kali logo is shown before the computer is shut down\",\n  type: C.TYPE_TIMEOUT,\n};\n\nconst GRUB_TIMEOUT: SettingsInfo = {\n  title: \"Grub timeout\",\n  name: \"bootTimeout\",\n  description: \"If the user does not press a key after X seconds, the first boot menu entry gets executed automatically\",\n  type: C.TYPE_TIMEOUT_OR_NULL,\n};\n\nconst CRYPT_DEVICE: SettingsInfo = {\n  title: \"Crypt device (root partition)\",\n  name: \"cryptDevice\",\n  description: \"The name of the encrypted partition. Setting this option will cause the decrypt disk screen to be shown\",\n  type: C.TYPE_STRING_OR_NULL,\n};\n\nconst INITIAL_SCREEN: SettingsInfo = {\n  title: \"Initial screen\",\n  name: \"initialScreen\",\n  description: \"Select which state the computer should start in\",\n  type: C.TYPE_INITIAL_SCREEN,\n};\n\nconst CHECK_DECRYPT_PASS_URL: SettingsInfo = {\n  title: \"Check disk password URL\",\n  name: \"checkDecryptionPasswordUrl\",\n  description: \"The URL to send a request to when the user tries to decrypt the disk\",\n  type: C.TYPE_TEMPLATE_URL_PASS,\n};\n\nconst CHECK_LOGIN_URL: SettingsInfo = {\n  title: \"Check login URL\",\n  name: \"checkLoginCredentialsUrl\",\n  description: \"The URL to send a request to when the user tries to log in\",\n  type: C.TYPE_TEMPLATE_URL_USER_PASS,\n};\n\nconst URL_VERIFICATION_TIMEOUT: SettingsInfo = {\n  title: \"Server verification timeout\",\n  name: \"serverRequestTimeout\",\n  description: \"How long to wait for a response from the server, before falling \" +\n    \"back on the regular expression check. Setting the value too high can cause a visible delay \" +\n    \"if the server is not reachable / responding\",\n  type: C.TYPE_TIMEOUT,\n};\n\nconst REGEX_DECRYPT_PASSWORD: SettingsInfo = {\n  title: \"Decryption password\",\n  name: \"validDecryptionPasswordRegex\",\n  description: \"Accept the disk password if it matches this regular expression\",\n  type: C.TYPE_REGEX,\n};\n\nconst REGEX_LOGIN_USERNAME: SettingsInfo = {\n  title: \"Login username\",\n  name: \"validLoginUsernameRegex\",\n  description: \"Accept the login username if it matches this regular expression\",\n  type: C.TYPE_REGEX,\n};\n\nconst REGEX_LOGIN_PASSWORD: SettingsInfo = {\n  title: \"Login password\",\n  name: \"validLoginPasswordRegex\",\n  description: \"Accept the login password if it matches this regular expression\",\n  type: C.TYPE_REGEX,\n};\n\n\nexport const FIELDS_TIMING = [GRUB_GREETER_DURATION, KERNEL_DURATION,\n  INITRD_DURATION, BOOT_LOGO_DURATION, SHUTDOWN_LOGO_DURATIION];\nexport const FIELDS_GENERAL = [HOSTNAME, INITIAL_SCREEN, GRUB_TIMEOUT, CRYPT_DEVICE];\nexport const FIELDS_CREDENTIAL_SERVER = [CHECK_DECRYPT_PASS_URL, CHECK_LOGIN_URL,\n  URL_VERIFICATION_TIMEOUT];\nexport const FIELDS_CREDENTIAL_LOCAL = [REGEX_DECRYPT_PASSWORD, REGEX_LOGIN_USERNAME,\n  REGEX_LOGIN_PASSWORD];\n\nconst ALL_SETTINGS = [...FIELDS_GENERAL, ...FIELDS_TIMING,\n...FIELDS_CREDENTIAL_SERVER, ...FIELDS_CREDENTIAL_LOCAL];\n\nexport const SETTINGS_MAP = new Map<string, SettingsInfo>();\nfor (let s of ALL_SETTINGS) {\n  SETTINGS_MAP.set(s.name, s);\n}\n","import { ReduxConstants, DEFAULT_CONSTANTS } from '../redux/store';\nimport { SETTINGS_MAP } from './SettingInfos';\nimport { checkInput } from './Types';\n\nexport interface Settings {\n  // server verification\n  checkLoginCredentialsUrl: string,\n  checkDecryptionPasswordUrl: string,\n  serverRequestTimeout: string,\n  // local verification\n  validLoginUsernameRegex: string,\n  validLoginPasswordRegex: string,\n  validDecryptionPasswordRegex: string,\n\n  [key: string]: string,\n}\n\nexport function asSettings(constants: ReduxConstants): Settings {\n  return {\n    // server verification\n    checkLoginCredentialsUrl: fromStringOrNull(constants.checkLoginCredentialsUrl),\n    checkDecryptionPasswordUrl: fromStringOrNull(constants.checkDecryptionPasswordUrl),\n    serverRequestTimeout: fromNumber(constants.serverRequestTimeout),\n    // local verification\n    validLoginUsernameRegex: fromRegex(constants.validLoginUsernameRegex),\n    validLoginPasswordRegex: fromRegex(constants.validLoginPasswordRegex),\n    validDecryptionPasswordRegex: fromRegex(constants.validDecryptionPasswordRegex),\n  };\n}\n\nfunction fromNumber(value: number): string {\n  return \"\" + value;\n}\n\nfunction fromStringOrNull(value: string | null): string {\n  return value || \"\";\n}\n\n// function fromNumberOrNull(value: number | null): string {\n//   return value ? \"\" + value : \"\";\n// }\n\nfunction fromRegex(value: RegExp): string {\n  return value.source;\n}\n\nexport function isValid(settings: Settings): boolean {\n  for (let [key, value] of Object.entries(settings)) {\n    let info = SETTINGS_MAP.get(key);\n    if (info) {\n      let errorMessage = checkInput(info.type, value);\n      if (errorMessage) {\n        let message = `The value you supplied for \"${key}\" is not valid!`;\n        console.log(message);\n        return false;\n      }\n    } else {\n      console.warn(`No input verification defined for \"${key}\"`);\n    }\n  }\n  return true;\n}\n\nexport function parseSettings(settings: Settings): ReduxConstants {\n  let constants = { ...DEFAULT_CONSTANTS };\n  //credentials\n  constants.checkDecryptionPasswordUrl = stringOrNull(settings.checkDecryptionPasswordUrl);\n  constants.checkLoginCredentialsUrl = stringOrNull(settings.checkLoginCredentialsUrl);\n  constants.serverRequestTimeout = Number(settings.serverRequestTimeout);\n  return constants;\n}\n\nfunction stringOrNull(value: string): string | null {\n  return value ? value : null;\n}\n\n// function numberOrNull(value: string): number | null {\n//   return value ? Number(value) : null;\n// }\n\nexport function parseUrl(settings: Settings) {\n  // edit a copy\n  settings = { ...settings };\n  // read url (hash) params\n  // if hash has \"setup=skip\": immediately start the simulation\n  let hash = window.location.hash;\n  if (hash) {\n    let setup;\n    let params = new URLSearchParams(hash.substr(1));\n    for (let [key, value] of params.entries()) {\n      value = decodeURIComponent(value);\n      if (value === \"null\") {\n        value = \"\";\n      }\n      if (key === \"setup\") {\n        setup = value; //if multiple definitions: only keep the last value\n      } else {\n        if (settings[key] !== undefined) {\n          console.log(`Using url parameter: ${key} -> ${value}`);\n          settings[key] = value;\n        } else {\n          console.warn(`Unknown url parameter: ${key}`);\n        }\n      }\n    }\n    return {\n      settings: settings,\n      skipSetup: setup === \"skip\"\n    };\n  }\n  return null;\n}\n","import React from 'react';\nimport { ReduxConstants, DEFAULT_CONSTANTS } from '../redux/store';\nimport { initialSetup } from '../redux/actions';\nimport * as C from '../redux/constants';\nimport Setting from './Setting';\nimport { Settings } from './State';\nimport { renderInput, checkInput, allowsEmptyInput } from './Types';\nimport { isValid, parseSettings, asSettings, parseUrl } from './State';\nimport {\n  SettingsInfo, FIELDS_GENERAL, FIELDS_TIMING,\n  FIELDS_CREDENTIAL_SERVER, FIELDS_CREDENTIAL_LOCAL\n} from './SettingInfos';\n\nconst DEFAULT_SETTINGS = asSettings(DEFAULT_CONSTANTS);\n\n\nclass SetupView extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      settings: asSettings(props.constants),\n    };\n  }\n\n  componentDidMount() {\n    let parsed = parseUrl(this.state.settings);\n    if (parsed) {\n      this.setState({ settings: parsed.settings });\n      // if (parsed.skipSetup) {\n      //   console.log(\"Trying to skip setup\");\n      //   this.start(parsed.settings, false);\n      // }\n    }\n  }\n\n  getParamString() {\n    let params = [];\n    for (let [key, value] of Object.entries(this.state.settings)) {\n      value = encodeURIComponent(value);\n      if (value === \"\") {\n        value = \"null\";\n      }\n      params.push(`${key}=${value}`);\n    }\n    return params.join(\"&\");\n  }\n\n  render() {\n    return <div className=\"setup\">\n      <h1>Setup</h1>\n      Here you can configure the Kali Linux simulation. Or just skip this step by\n      pressing the <code>Start</code> button.\n      Fields marked with a \"{C.MARKER_CAN_BE_LEFT_EMPTY}\" can be left empty to diable said feature.\n\n      <button onClick={() => this.start(this.state.settings, true)}>Skip setup</button>\n\n      <h2>General settings</h2>\n      {this.renderSettings(FIELDS_GENERAL)}\n\n      <h2>Timing settings</h2>\n      All values below are measured in seconds. Negative values are not allowed.\n      {this.renderSettings(FIELDS_TIMING)}\n\n      <h2>Credential settings</h2>\n      These settings can be used to specify the credentials that a user can use to sucessfully \"log in\".\n      They can also be used to extract the user credentials (via the url fields).\n      {this.renderSettings(FIELDS_CREDENTIAL_SERVER)}\n\n      <h2>Local credential verification</h2>\n      If the server defined above can not be reached or does not respond in time,\n       these fields will be used to verify the credentials. The fields accept\n       regular expressions, which are a powerful way to match text.\n       If you are not familiar with them go check out this\n       <a href=\"https://www.computerhope.com/unix/regex-quickref.htm\">\n        quick start guide to regular expressions\n       </a>.\n       {this.renderSettings(FIELDS_CREDENTIAL_LOCAL)}\n\n      <button onClick={() => this.start(this.state.settings, true)}>Start</button>\n    //TODO add reset to defaults button\n    </div>\n  }\n\n  renderSettings(list: SettingsInfo[]) {\n    return <div className=\"settings\">\n      {list.map(this.renderGenericSetting)}\n    </div>\n  }\n\n  renderGenericSetting = (setting: SettingsInfo) => {\n    let value = this.state.settings[setting.name];\n    let defaultValue = DEFAULT_SETTINGS[setting.name];\n    let errorMessage = checkInput(setting.type, value);\n    let canBeEmpty = allowsEmptyInput(setting.type);\n    let onChangeCallback = (newValue: string) => {\n      let copy = { ...this.state.settings };\n      copy[setting.name] = newValue;\n      this.setState({ settings: copy });\n    }\n\n    return <Setting key={setting.name} name={setting.title}\n      canBeEmpty={canBeEmpty} errorMessage={errorMessage} description={setting.description}>\n      {renderInput(setting.type, defaultValue, value, onChangeCallback)}\n    </Setting>\n  }\n\n  start(settings: Settings, alertOnError: boolean) {\n    if (isValid(settings)) {\n      let constants = parseSettings(settings);\n      window.location.hash = \"\";\n      initialSetup(constants);\n      return true;\n    } else {\n      if (alertOnError) {\n        alert(\"Please check your inputs. At least one of them has an invalid value\");\n      }\n      return false;\n    }\n  }\n}\n\n\ninterface State {\n  settings: Settings,\n}\n\ninterface Props {\n  constants: ReduxConstants,\n}\n\nexport default SetupView;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { ReduxState, ReduxConstants } from './redux/store';\nimport * as C from './redux/constants';\nimport FullscreenManager from './FullscreenManager';\nimport ScreenManager from './win10/ScreenManager';\nimport ScreenCover from './ScreenCover';\nimport Setup from './setup/Setup';\nimport { PreloadImages } from './Images';\nimport '../css/App.scss';\n\n// TODOs\n// --- Nice to have ---\n// Disable autofill on password fields (in Firefox)\n// Build my own clock, that does not create error messages in the console\n\nclass App extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    return <div className=\"app\">\n      <PreloadImages />\n      <FullscreenManager alwaysShowContents={true}>\n        {this.renderContent()}\n      </FullscreenManager>\n    </div>\n  }\n\n  renderContent() {\n    if (C.DEBUG){\n      return <ScreenManager />\n    } else {\n      if (this.props.showSetup) {\n        return <Setup constants={this.props.constants} />\n      } else {\n        let showKali = this.props.isRunning && this.props.isFullscreen;\n        return showKali ? <ScreenManager /> : <ScreenCover />;\n      }\n    }\n  }\n}\n\ninterface State {\n}\n\ninterface Props {\n  isRunning: boolean,\n  showSetup: boolean,\n  isFullscreen: boolean,\n  constants: ReduxConstants,\n}\n\nconst mapStateToProps = (state: ReduxState, ownProps: any) => {\n  return {\n    ...ownProps,\n    isRunning: !state.var.isFinished,\n    isFullscreen: state.fullscreen.active,\n    showSetup: !state.isSetupDone,\n    constants: state.const,\n  };\n};\n\nconst ReduxApp = connect(mapStateToProps)(App);\nexport default ReduxApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\nimport App from './app/App';\nimport { store } from './app/redux/store';\nimport { onHistoryPopState } from './app/redux/actions';\n\nwindow.addEventListener('popstate', (event) => {\n  if (!event.state || !event.state.stage) {\n    //Go to setup\n    onHistoryPopState(false);\n  } else {\n    // go to simulation\n    onHistoryPopState(true);\n  }\n  console.log(\"[Event: popstate] state: \" + JSON.stringify(event.state));\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}