{"version":3,"sources":["img/background.jpg","img/user.png","serviceWorker.ts","app/Images.tsx","app/redux/reducer.ts","app/redux/constants.ts","app/redux/reducers/login.ts","app/redux/store.ts","app/redux/actions.ts","app/FullscreenManager.tsx","app/win10/ScreenLogin.tsx","app/win10/login/LockedScreen.tsx","app/VerifyCredentials.ts","app/win10/login/UserList.tsx","app/win10/login/PasswordDialog.tsx","app/win10/ScreenManager.tsx","app/setup/Setting.tsx","app/setup/Types.tsx","app/setup/SettingInfos.ts","app/setup/State.ts","app/setup/Setup.tsx","app/App.tsx","index.tsx"],"names":["module","exports","Boolean","window","location","hostname","match","NOT_INLINED_IMAGES","imageBackground","defaultUserIcon","filter","src","startsWith","renderImage","key","alt","PreloadImages","className","map","reducer","state","action","console","warn","FALLBACK_STATE","type","constants","payload","vars","setScreen","users","user","iconUrl","initialScreen","DEFAULT_VARIABLES","const","var","updateSelectedUser","isSetupDone","fullscreen","requested","isFullscreenActive","active","value","varReducer","newScreen","screen","name","miscReducer","login","selectedUser","index","password","revealPassword","success","copy","failed","attempts","isFinished","loginReducer","previousScreen","changeTime","Date","DEFAULT_CONSTANTS","checkLoginCredentialsUrl","checkDecryptionPasswordUrl","validLoginUsernameRegex","RegExp","validLoginPasswordRegex","validDecryptionPasswordRegex","serverRequestTimeout","coverUrl","coverFakeUrl","coverFakeTitle","openMenu","devTools","undefined","__REDUX_DEVTOOLS_EXTENSION__","trace","traceLimit","store","createStore","d","dispatch","setRevealPassword","newValue","setLoginOpenMenu","initialSetup","document","title","history","pushState","stage","onHistoryPopState","setupIsDone","FullscreenManager","props","showContents","this","isFullscreen","alwaysShowContents","handleKeys","handleFocusableElements","onKeyEvent","enabled","requestFullscreen","onChange","children","Component","ReduxFullscreenManager","connect","ownProps","ScreenLogin","closeMenu","isMenuOpen","onClick","React","ReduxScreenLogin","format","a","username","url","timeout","resolveWithTimeout","checkCredentialsViaServer","serverResponse","sleep","validUsername","validPassword","log","promise","timeoutSeconds","timeoutMillis","Math","round","TimeoutError","info","error","urlTemplate","replace","http","response","isValid","fetch","ok","statusText","json","body","ms","Promise","resolve","setTimeout","ReduxUserList","selectedIndex","length","e","ReduxLoginDialog","failedLogin","reduxState","showRevealButton","doLogin","isLoginValid","then","hidePassword","target","placeholder","autoFocus","autoComplete","onMouseDown","onMouseUp","onMouseLeave","role","aria-label","preventContextMenu","ScreenManager","onContextMenu","renderContent","LockedScreen","PasswordDialog","style","color","ReduxScreenManager","Setting","hasErrorClass","errorMessage","description","canBeEmpty","allowsEmptyInput","checkInput","number","Number","isNaN","checkTimingStringForErrors","placeholders","push","urlText","URL","p","indexOf","checkUrlForPlaceholders","checkRegex","FIELDS_TIMING","FIELDS_GENERAL","FIELDS_CREDENTIAL_SERVER","FIELDS_CREDENTIAL_LOCAL","ALL_SETTINGS","SETTINGS_MAP","Map","s","set","asSettings","fromStringOrNull","fromRegex","source","stringOrNull","DEFAULT_SETTINGS","App","debugIsInitialized","ReduxApp","isRunning","showSetup","addEventListener","event","JSON","stringify","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.2632feb2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/background.0099788b.jpg\";","module.exports = __webpack_public_path__ + \"static/media/user.b34dc68a.png\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\n\nimport imageBackground from '../img/background.jpg';\nimport defaultUserIcon from '../img/user.png';\n\nexport {imageBackground, defaultUserIcon};\n\nfunction isNotInlineImage(src: string) {\n  return !src.startsWith(\"data:image\");\n}\n\nconst NOT_INLINED_IMAGES = [imageBackground, defaultUserIcon].filter(isNotInlineImage);\n\n\nfunction renderImage(src: string) {\n  return <img key={src} src={src} alt=\"\" />\n}\n\nexport function PreloadImages() {\n  return <div className=\"preload-images\">\n    {NOT_INLINED_IMAGES.map(renderImage)}\n  </div>\n}\n","import * as Actions from './actions';\nimport * as C from './constants';\nimport {\n  ReduxState, ReduxVariables, ReduxConstants, FALLBACK_STATE, DEFAULT_VARIABLES\n} from './store';\nimport loginReducer from './reducers/login';\nimport {defaultUserIcon} from '../Images';\n\nexport function reducer(state: ReduxState | undefined, action: Actions.Action): ReduxState {\n  if (!state) {\n    console.warn(\"No state was supplied to reducer. Falling back to default values\");\n    state = FALLBACK_STATE;\n  }\n\n  // This is the only event that is allowed to change the ReduxConstants\n  switch (action.type) {\n    case C.INITIAL_SETUP: {\n      let constants = action.payload as ReduxConstants;\n      constants = {\n        ...constants,\n        users: constants.users.map(user => {\n          // Replace empty urls with the default version\n          const iconUrl = user.iconUrl ? user.iconUrl : defaultUserIcon;\n          return {\n            ...user,\n            iconUrl,\n          }\n        })\n      }\n      let vars = setScreen(constants.initialScreen, DEFAULT_VARIABLES, constants);\n      vars = updateSelectedUser(constants, vars);\n      return {\n        const: constants,\n        var: vars,\n        isSetupDone: true,\n        fullscreen: {\n          ...state.fullscreen,\n          requested: !C.DEBUG,\n        },\n      };\n    }\n    case C.SET_SETUP_DONE: {\n      let isSetupDone = action.payload as boolean;\n      return {\n        ...state,\n        isSetupDone: isSetupDone,\n      };\n    }\n    case C.SET_FULLSCREEN_IS_ACTIVE: {\n      let isFullscreenActive = action.payload as boolean;\n      return {\n        ...state,\n        fullscreen: {\n          requested: isFullscreenActive,//reset it so it can be set again later\n          active: isFullscreenActive,\n        },\n      }\n    }\n    case C.SET_FULLSCREEN_IS_REQUESTED: {\n      let value = action.payload as boolean;\n      return {\n        ...state,\n        fullscreen: {\n          ...state.fullscreen,\n          requested: value,\n        },\n      }\n    }\n    default: {\n      return {\n        ...state,\n        var: varReducer(state.var, action, state.const),\n      };\n    }\n  }\n}\n\n\nfunction varReducer(state: ReduxVariables, action: Actions.Action, constants: ReduxConstants): ReduxVariables {\n  state = loginReducer(state, action);\n  state = miscReducer(state, action, constants);\n  return state;\n}\n\nfunction miscReducer(state: ReduxVariables, action: Actions.Action, constants: ReduxConstants): ReduxVariables {\n  switch (action.type) {\n    case C.SET_SCREEN: {\n      let newScreen = action.payload as string;\n      state = setScreen(newScreen, state, constants);\n      break;\n    }\n    case C.RESET_STATE: {\n      state = setScreen(DEFAULT_VARIABLES.screen.name, DEFAULT_VARIABLES, constants);\n      break;\n    }\n    case C.SELECT_USER: {\n      state = updateSelectedUser(constants, state);\n    }\n  }\n  return state;\n}\n\nfunction updateSelectedUser(constants: ReduxConstants, state: ReduxVariables): ReduxVariables {\n  const index = state.login.selectedUser.index;\n  const user = constants.users[index];\n  return {\n    ...state,\n    login: {\n      ...state.login,\n      selectedUser: {\n        index: index,\n        name: user.name,\n        iconUrl: user.iconUrl,\n      },\n    },\n  }\n}\n\nexport function setScreen(newScreen: string, state: ReduxVariables, constants: ReduxConstants): ReduxVariables {\n  // Handle suspend and cover\n  let needsPreviousScreen = newScreen === C.SCREEN_SUSPEND || newScreen === C.SCREEN_COVER;\n  let previousScreen = needsPreviousScreen ? state.screen.name : null;\n\n  return {\n    ...state,\n    screen: {\n      name: newScreen,\n      changeTime: new Date(),\n    },\n    previousScreen: previousScreen,\n  };\n}\n\nexport default reducer;\n","export const DEBUG = true;\n\nexport const MARKER_CAN_BE_LEFT_EMPTY = \"*\";\n\nexport const PLACEHOLDER_USERNAME = \"<username>\";\nexport const PLACEHOLDER_PASSWORD = \"<password>\";\n\n// action types\nexport const SET_FULLSCREEN_IS_REQUESTED = \"SET_FULLSCREEN_IS_REQUESTED\";\nexport const SET_FULLSCREEN_IS_ACTIVE = \"SET_FULLSCREEN_IS_ACTIVE\";\nexport const SELECT_USER = \"SELECT_USER\";\nexport const SET_LOGIN_PASSWORD = \"SET_LOGIN_PASSWORD\";\nexport const SET_SCREEN = \"SET_SCREEN\";\nexport const SET_HOSTNAME = \"SET_HOSTNAME\";\nexport const SET_LOGIN_OPEN_MENU = \"SET_LOGIN_OPEN_MENU\";\nexport const SET_REVEAL_PASSWORD = \"SET_REVEAL_PASSWORD\";\nexport const TRY_LOGIN = \"TRY_LOGIN\";\nexport const RESET_STATE = \"RESET_STATE\";\nexport const INITIAL_SETUP = \"INITIAL_SETUP\";\nexport const SET_SETUP_DONE = \"SET_SETUP_DONE\";//should only be used for browser history\n\n// power related screen\nexport const SCREEN_OFF = \"SCREEN_OFF\";\nexport const SCREEN_SUSPEND = \"SCREEN_SUSPEND\";\n// normal screens\nexport const SCREEN_LOCKED = \"SCREEN_LOCKED\";\nexport const SCREEN_LOGIN = \"SCREEN_LOGIN\";\nexport const SCREEN_PASSWORD_RESET = \"SCREEN_PASSWORD_RESET\";\n//\nexport const SCREEN_COVER = \"SCREEN_COVER\";\n\n// input types\nexport const TYPE_STRING = \"TYPE_STRING\";\nexport const TYPE_STRING_OR_NULL = \"TYPE_STRING_OR_NULL\";\nexport const TYPE_TIMEOUT = \"TYPE_TIMEOUT\";\nexport const TYPE_TIMEOUT_OR_NULL = \"TYPE_TIMEOUT_OR_NULL\";\nexport const TYPE_INITIAL_SCREEN = \"TYPE_INITIAL_SCREEN\";\nexport const TYPE_REGEX = \"TYPE_REGEX\";\nexport const TYPE_TEMPLATE_URL_PASS = \"TYPE_TEMPLATE_URL_PASS\";\nexport const TYPE_TEMPLATE_URL_USER_PASS = \"TYPE_TEMPLATE_URL_USER_PASS\";\n","import * as Actions from '../actions';\nimport * as C from '../constants';\nimport { ReduxVariables } from '../store';\n\n\nexport default function reducer(state: ReduxVariables, action: Actions.Action): ReduxVariables {\n  switch (action.type) {\n    case C.SELECT_USER: {\n      let payload = action.payload as number;\n      return {\n        ...state,\n        login: {\n          ...state.login,\n          selectedUser: {\n            ...state.login.selectedUser,\n            index: payload,\n            // The rest gets updated afterwards\n          },\n          password: '',\n        },\n      };\n    }\n    case C.SET_LOGIN_PASSWORD: {\n      let payload = action.payload as string;\n      return {\n        ...state,\n        login: {\n          ...state.login,\n          password: payload,\n        },\n      };\n    }\n    case C.SET_REVEAL_PASSWORD: {\n      let payload = action.payload as boolean;\n      return {\n        ...state,\n        login: {\n          ...state.login,\n          revealPassword: payload,\n        },\n      };\n    }\n    case C.TRY_LOGIN: {\n      let success = action.payload as boolean;\n      const copy = {\n        ...state,\n        login: {\n          ...state.login,\n          revealPassword: false,\n          failed: !success,\n          attempts: state.login.attempts + 1,\n        },\n        isFinished: success,\n      };\n      if (!success) {\n        // Clear password\n        copy.login.password = '';\n      }\n      return copy;\n    }\n    default:\n      return state;\n  }\n}\n","import { createStore } from 'redux';\nimport { reducer } from './reducer';\nimport * as C from './constants';\n\nexport interface ReduxState {\n  const: ReduxConstants,\n  var: ReduxVariables,\n  isSetupDone: boolean,\n  fullscreen: {\n    requested: boolean,\n    active: boolean,\n  },\n}\n\nexport interface UserInfo {\n  // TODO highlight-color?\n  name: string,\n  iconUrl: string,\n}\n\n// The settings that can be set by the user before the simulation is started\n// They will not change over the course of the simulation\nexport interface ReduxConstants {\n  users: UserInfo[],\n  initialScreen: string,\n  // urls for logging / checking credentials\n  checkLoginCredentialsUrl: string | null,\n  checkDecryptionPasswordUrl: string | null,\n  serverRequestTimeout: number,\n  // local validation\n  validLoginUsernameRegex: RegExp,\n  validLoginPasswordRegex: RegExp,\n  validDecryptionPasswordRegex: RegExp,\n  // cover\n  coverUrl: string,\n  coverFakeUrl: string,\n  coverFakeTitle: string,\n}\n\nexport const DEFAULT_CONSTANTS: ReduxConstants = {\n  users: [{name: 'Test 123', iconUrl: 'https://i.ytimg.com/vi/B9gjMJ4rTJw/maxresdefault.jpg'}, {name: 'User', iconUrl: ''}],\n  //password stuff\n  checkLoginCredentialsUrl: \"http://localhost:3333/login.json?u=<username>&p=<password>\",\n  checkDecryptionPasswordUrl: \"http://localhost:3333/disk.json?p=<password>\",\n  validLoginUsernameRegex: RegExp(\"^.+$\"),//anything except empty string\n  validLoginPasswordRegex: RegExp(\"^.+$\"),\n  validDecryptionPasswordRegex: RegExp(\"^$\"),//empty string\n  serverRequestTimeout: 2.0,\n  initialScreen: C.SCREEN_LOCKED,\n  //cover\n  coverUrl: \"https://www.google.com/webhp?igu=1\",\n  coverFakeUrl: \"/www.google.com\",\n  coverFakeTitle: \"Google\",\n}\n\nexport interface SelectedUser {\n  index: number,\n  name: string,\n  iconUrl: string,\n}\n\n// The variables or \"state\" of the simulation.\n// Will be reset on reboot.\nexport interface ReduxVariables {\n  screen: {\n    name: string,\n    changeTime: Date,\n  },\n  login: {\n    selectedUser: SelectedUser,\n    revealPassword: boolean,\n    password: string,\n    openMenu: string | null,\n    failed: boolean,\n    attempts: number,\n  },\n  previousScreen: string | null,\n  isFinished: boolean,\n}\n\nexport const DEFAULT_VARIABLES: ReduxVariables = {\n  screen: {\n    name: C.SCREEN_LOCKED,\n    changeTime: new Date(),\n  },\n  login: {\n    selectedUser: {\n      index: 0,\n      name: \"\",\n      iconUrl: \"\",\n    },\n    revealPassword: false,\n    password: \"\",\n    openMenu: null,\n    failed: false,\n    attempts: 0,\n  },\n  previousScreen: null,\n  isFinished: false,\n}\n\nexport const FALLBACK_STATE: ReduxState = {\n  const: DEFAULT_CONSTANTS,\n  var: DEFAULT_VARIABLES,\n  isSetupDone: false,\n  fullscreen: {\n    requested: false,\n    active: false,\n  }\n}\n\nlet devTools = undefined;\nif ((window as any).__REDUX_DEVTOOLS_EXTENSION__) {\n  // Redux dev tools are available\n  let devToolOptions = {\n    trace: false,\n    traceLimit: 25\n  };\n  devTools = (window as any).__REDUX_DEVTOOLS_EXTENSION__(devToolOptions);\n}\n\nexport const store = createStore(reducer, FALLBACK_STATE, devTools);\n\n// if (C.DEBUG) {\n//   store.dispatch({\n//     type: C.INITIAL_SETUP,\n//     payload: {\n//       ...DEFAULT_CONSTANTS,\n//       initialScreen: C.SCREEN_PLYMOUTH_PASSWORD,\n//       cryptDevice: \"sdXY_crypt\",\n//       plymountDuration: 4,\n//       checkDecryptionPasswordUrl: null,\n//     },\n//   });\n// }\n\nexport default store;\n","//Needs to be here to prevent cyclic references\nimport store, { ReduxConstants } from './store';\nimport * as C from './constants';\n\nfunction d(action: Action) {\n  store.dispatch(action);\n}\n\nexport interface Action {\n  type: string,\n  payload?: string | number | boolean | ReduxConstants | null,\n};\n\n// action creators\nexport function requestFullscreen(newValue: boolean) {\n  d({\n    type: C.SET_FULLSCREEN_IS_REQUESTED,\n    payload: newValue,\n  });\n}\n\nexport function setIsFullscreenActive(newValue: boolean) {\n  d({\n    type: C.SET_FULLSCREEN_IS_ACTIVE,\n    payload: newValue,\n  });\n}\n\nexport function selectUser(newIndex: number) {\n  d({\n    type: C.SELECT_USER,\n    payload: newIndex,\n  });\n}\n\nexport function setLoginPassword(newValue: string) {\n  d({\n    type: C.SET_LOGIN_PASSWORD,\n    payload: newValue,\n  });\n}\n\nexport function tryLogin(success: boolean) {\n  d({\n    type: C.TRY_LOGIN,\n    payload: success,\n  });\n}\n\nexport function setRevealPassword(newValue: boolean) {\n  d({\n    type: C.SET_REVEAL_PASSWORD,\n    payload: newValue,\n  });\n}\n\nexport function setLoginOpenMenu(newValue: string | null) {\n  d({\n    type: C.SET_LOGIN_OPEN_MENU,\n    payload: newValue,\n  });\n}\n\nexport function setScreen(newValue: string) {\n  d({\n    type: C.SET_SCREEN,\n    payload: newValue,\n  });\n}\n\nexport function initialSetup(constants: ReduxConstants) {\n  document.title = constants.coverFakeTitle;\n  window.history.pushState({ stage: \"simulation\" }, \"\", constants.coverFakeUrl);\n\n  d({\n    type: C.INITIAL_SETUP,\n    payload: constants,\n  });\n}\n\nexport function resetState() {\n  d({ type: C.RESET_STATE });\n}\n\nexport function onHistoryPopState(setupIsDone: boolean) {\n  d({ type: C.SET_SETUP_DONE, payload: setupIsDone });\n}\n","import React, { Component } from \"react\";\nimport Fullscreen from \"react-full-screen\";\nimport KeyboardEventHandler from 'react-keyboard-event-handler';\nimport { connect } from 'react-redux';\nimport { ReduxState } from './redux/store';\nimport { setIsFullscreenActive, requestFullscreen } from './redux/actions';\n\n\nclass FullscreenManager extends Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      // isFullscreen: true,\n    };\n  }\n\n  // requestFullscreen = () => {\n  //   this.setState({ isFullscreen: true });\n  // }\n\n  render() {\n    let showContents = this.props.isFullscreen;\n    if (this.props.alwaysShowContents === true) {\n      showContents = true;\n    }\n    return (\n      <div>\n        <KeyboardEventHandler handleKeys={[\"ctrl+space\"]} handleFocusableElements\n          onKeyEvent={() => requestFullscreen(true)} />\n\n        <Fullscreen\n          enabled={this.props.requestFullscreen}\n          onChange={isFullscreen => setIsFullscreenActive(isFullscreen)}\n        >\n          {showContents && this.props.children}\n        </Fullscreen>\n      </div>\n    );\n  }\n}\n\ninterface Props {\n  alwaysShowContents?: boolean,\n  requestFullscreen: boolean,\n  isFullscreen: boolean,\n}\n\ninterface State {\n  // isFullscreen: boolean;\n}\n\n// export default FullscreenManager;\nconst mapStateToProps = (state: ReduxState, ownProps: any) => {\n  return {\n    ...ownProps,\n    requestFullscreen: state.fullscreen.requested,\n    isFullscreen: state.fullscreen.active,\n  };\n};\n\nconst ReduxFullscreenManager = connect(mapStateToProps)(FullscreenManager);\nexport default ReduxFullscreenManager;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { ReduxState } from '../redux/store';\nimport { setLoginOpenMenu } from '../redux/actions';\nimport { imageBackground } from '../Images';\n\n\nclass ScreenLogin extends React.Component<Props> {\n  render() {\n    return <div className=\"screen-login\">\n      <img className=\"fill-screen\" src={imageBackground} alt=\"\"></img>\n      <div className=\"fill-screen v-flex\" onClick={this.closeMenu}>\n        <div className=\"expand\"></div>\n        {this.props.children}\n        <div className=\"expand h-flex\">\n          <div className=\"expand\"></div>\n          <div className=\"button-bar\">\n            {/* TODO Locked */}\n            Internet, Battery\n            {/* TODO password */}\n            Keyboard layout, WIFI, Accessibility, Power (Sleep, Shut down, Restart)\n          </div>\n        </div>\n      </div>\n    </div>\n  }\n\n  closeMenu = () => {\n    if (this.props.isMenuOpen) {\n      setLoginOpenMenu(null);\n    }\n  }\n}\n\ninterface Props {\n  isMenuOpen: boolean,\n  buttons: any[],\n}\n\nconst mapStateToProps = (state: ReduxState, ownProps: any) => {\n  return {\n    ...ownProps,\n    isMenuOpen: state.var.login.openMenu !== null,\n  };\n};\n\nconst ReduxScreenLogin = connect(mapStateToProps)(ScreenLogin);\nexport default ReduxScreenLogin;\n","import React from 'react';\nimport Clock from 'react-live-clock';\nimport KeyboardEventHandler from 'react-keyboard-event-handler';\nimport * as C from '../../redux/constants';\nimport {setScreen} from '../../redux/actions';\n\n\nconst ScreenLogin = () => {\n    return <div className=\"screen-login-locked v-flex\">\n        <KeyboardEventHandler handleKeys={[\"all\"]} handleFocusableElements\n            onKeyEvent={() => setScreen(C.SCREEN_LOGIN)} />\n\n        <div className=\"expand\"></div>\n        <div className=\"clock\">\n            <div className=\"clock-time\"><Clock format={'HH:mm'} /></div>\n            <div className=\"clock-date\"><Clock format={'dddd, D MMMM'} /></div>\n        </div>\n    </div>\n}\n\nexport default ScreenLogin;\n","import { timeout, TimeoutError } from 'promise-timeout';\nimport { ReduxState } from './redux/store';\nimport * as C from './redux/constants';\n\nconst SLEEP_TIME = 1000;\n\nexport async function isLoginValid(state: ReduxState) {\n  let username = state.var.login.selectedUser.name;\n  let password = state.var.login.password;\n  let url = state.const.checkLoginCredentialsUrl;\n  let timeout = state.const.serverRequestTimeout;\n\n  if (url !== null) {\n    // query the url to check password\n    let serverResponse = await resolveWithTimeout(\n      checkCredentialsViaServer(url, username, password), timeout);\n    if (serverResponse !== null) {\n      // got a valid server response\n      return serverResponse;\n    }\n  } else {\n    // simulete the check time by just waiting a bit\n    await sleep(SLEEP_TIME);\n  }\n  // use regexes to check validity\n  let validUsername = Boolean(username.match(state.const.validLoginUsernameRegex));\n  let validPassword = Boolean(password.match(state.const.validLoginPasswordRegex));\n  console.log(`Comparing login credentials to regex.\\n - validUsername: ${validUsername}\\n - validPassword: ${validPassword}`);\n  return validUsername && validPassword;\n}\n\nasync function resolveWithTimeout(promise: Promise<boolean | null>, timeoutSeconds?: number) {\n  try {\n    if (timeoutSeconds && timeoutSeconds > 0) {\n      let timeoutMillis = Math.round(timeoutSeconds * 1000);\n      return await timeout(promise, timeoutMillis);\n    } else {\n      return await promise;\n    }\n  } catch (err) {\n    if (err instanceof TimeoutError) {\n      console.info(`Promise timed out after ${timeoutSeconds} seconds`);\n    } else {\n      console.error(\"Promise resulted in error:\", err);\n    }\n    return null;\n  }\n}\n\nasync function checkCredentialsViaServer(urlTemplate: string, username: string | null,\n  password: string): Promise<boolean | null> {\n  let url = urlTemplate.replace(C.PLACEHOLDER_PASSWORD, password);\n  if (username !== null) {\n    url = url.replace(C.PLACEHOLDER_USERNAME, username);\n  }\n\n  console.log(`Checking credentials via url: \"${url}\"`)\n  let response = await http<VerifyCredentialsResponse>(url);\n\n  const isValid = response && response.isValid !== undefined ? response.isValid : null;\n  console.log(\"Server response:\", isValid);\n  return isValid;\n}\n\nasync function http<T>(url: string): Promise<T | null> {\n  try {\n    const response = await fetch(url);\n    if (!response.ok) {\n      console.error(`HTTP request failed: url=\"${url}\" response_status: \"${response.statusText}\"`);\n      return null;\n    }\n    const body = await response.json();\n    return body;\n  } catch (error) {\n    console.error(error);\n    return null;\n  }\n}\n\nfunction sleep(ms: number) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\ninterface VerifyCredentialsResponse {\n  isValid: boolean,\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { ReduxState, UserInfo } from '../../redux/store';\nimport { selectUser } from '../../redux/actions';\n\n\nconst UserList = (props: Props) => {\n    if (props.users.length < 2) {\n        return null;\n    } else {\n        return <div className=\"user-list\">\n            {props.users.map((user: UserInfo, index: number) => {\n                let className = \"entry\";\n                let onClick: ((e: any) => void) | undefined;\n                if (index === props.selectedIndex) {\n                    className += \" selected\";\n                } else {\n                    className += \" not-selected\";\n                    onClick = (e: any) => selectUser(index);\n                }\n                return <div\n                    key={index}\n                    className={className}\n                    onClick={onClick}>\n                    <img className=\"icon\" src={user.iconUrl} alt=\"\" />\n                    <div className=\"name\">\n                        {user.name}\n                    </div>\n                </div>\n            })}\n        </div>\n    }\n}\n\ninterface Props {\n    selectedIndex: number,\n    users: UserInfo[],\n}\n\nconst mapStateToProps = (state: ReduxState, ownProps: any) => {\n    return {\n        ...ownProps,\n        selectedIndex: state.var.login.selectedUser.index,\n        users: state.const.users,\n    };\n};\n\nconst ReduxUserList = connect(mapStateToProps)(UserList);\nexport default ReduxUserList;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport KeyboardEventHandler from 'react-keyboard-event-handler';\nimport { ReduxState, SelectedUser } from '../../redux/store';\nimport { setLoginPassword, tryLogin, setScreen, setRevealPassword } from '../../redux/actions';\nimport * as C from '../../redux/constants';\nimport { isLoginValid } from '../../VerifyCredentials';\nimport UserList from './UserList';\n\n\nconst LoginDialog = (props: Props) => {\n    const type = props.revealPassword ? \"text\" : \"password\";\n    const showRevealButton = props.password;\n    const onPasswordChange = (e: any) => setLoginPassword(e.target.value);\n    const doLogin = (e: any) => {\n        isLoginValid(props.reduxState).then(isValid => tryLogin(isValid));\n    };\n    const showPassword = (e: any) => setRevealPassword(true);\n    const hidePassword = (e: any) => {\n        if (props.revealPassword) {\n            setRevealPassword(false);\n        }\n    };\n\n    return <div className=\"password-dialog\">\n        <div className=\"user-icon\">\n            <img src={props.user.iconUrl} alt=\"\"></img>\n        </div>\n        <div className=\"user-name\">\n            <span>{props.user.name}</span>\n        </div>\n        <KeyboardEventHandler\n            handleKeys={[\"enter\"]}\n            onKeyEvent={doLogin}>\n            <div className=\"password-div h-flex\">\n                <div className=\"password-wrapper h-flex\">\n                    <input\n                        type={type}\n                        value={props.password}\n                        onChange={onPasswordChange}\n                        placeholder=\"Password\"\n                        autoFocus\n                        autoComplete=\"off\" />\n                    {showRevealButton &&\n                        <div className=\"button reveal\" onMouseDown={showPassword}\n                            onMouseUp={hidePassword} onMouseLeave={hidePassword}>\n                            <span role=\"img\" aria-label=\"show\">👁️</span>\n                        </div>\n                    }\n                </div>\n                <div className=\"button login\" onClick={doLogin}>\n                    <span role=\"img\" aria-label=\"go\">🡢</span>\n                </div>\n            </div>\n        </KeyboardEventHandler>\n        {props.failedLogin &&\n            <div className=\"reset-password\">\n                <span onClick={(e: any) => setScreen(C.SCREEN_PASSWORD_RESET)}>\n                    Reset password\n                </span>\n            </div>\n        }\n        <UserList />\n    </div>\n}\n\ninterface Props {\n    user: SelectedUser,\n    revealPassword: boolean,\n    password: string,\n    failedLogin: boolean,\n    reduxState: ReduxState,\n}\n\nconst mapStateToProps = (state: ReduxState, ownProps: any) => {\n    return {\n        ...ownProps,\n        user: state.var.login.selectedUser,\n        revealPassword: state.var.login.revealPassword,\n        password: state.var.login.password,\n        failedLogin: state.var.login.failed,\n        reduxState: state,\n    };\n};\n\nconst ReduxLoginDialog = connect(mapStateToProps)(LoginDialog);\nexport default ReduxLoginDialog;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport * as C from '../redux/constants';\nimport { ReduxState } from '../redux/store';\nimport ScreenLogin from './ScreenLogin';\nimport LockedScreen from './login/LockedScreen';\nimport PasswordDialog from './login/PasswordDialog';\n\n\nfunction preventContextMenu(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n  if (!C.DEBUG) {\n    e.preventDefault();\n    e.stopPropagation();\n  }\n}\n\nclass ScreenManager extends React.Component<Props> {\n  render() {\n    return <div className=\"screen-manager fill-screen\" onContextMenu={preventContextMenu}>\n      {this.renderContent()}\n    </div>\n  }\n\n  renderContent() {\n    switch (this.props.screen) {\n      case C.SCREEN_LOCKED:\n        return <ScreenLogin>\n          <LockedScreen />\n        </ScreenLogin>\n      case C.SCREEN_LOGIN:\n        return <ScreenLogin>\n          <PasswordDialog />\n        </ScreenLogin>\n      default:\n        return <h1 style={{ color: \"red\" }}>\n          {`Unknown screen: \"${this.props.screen}\"`}\n        </h1>\n    }\n  }\n}\n\ninterface Props {\n  screen: string,\n}\n\nconst mapStateToProps = (state: ReduxState, ownProps: any) => {\n  return {\n    ...ownProps,\n    screen: state.var.screen.name,\n  };\n};\n\nconst ReduxScreenManager = connect(mapStateToProps)(ScreenManager);\nexport default ReduxScreenManager;\n","import React from 'react';\nimport * as C from '../redux/constants';\n\n\nexport default function Setting(props: Props) {\n  let hasErrorClass = props.errorMessage ? \" has-error\" : \"\";\n  return <div className=\"setting\">\n    <div className=\"label\" title={props.description}>\n      {props.name}\n      {props.canBeEmpty &&\n        <abbr title=\"Leave this field empty to disable this feature\">\n          {C.MARKER_CAN_BE_LEFT_EMPTY}\n        </abbr>\n      }\n    </div>\n    <div className={\"value-and-error\" + hasErrorClass}>\n      <div className=\"value\">\n        {props.children}\n      </div>\n      {props.errorMessage &&\n        <div className=\"error\">\n          {props.errorMessage}\n        </div>\n      }\n    </div>\n  </div>\n}\n\ninterface Props {\n  name: string,\n  errorMessage?: string | null,\n  children: any,\n  canBeEmpty: boolean,\n  description: string,\n}\n","import React from 'react';\nimport * as C from '../redux/constants';\n\nexport interface RenderInputProps {\n  value: string,\n  setValue: (value: string) => void,\n}\n\nexport function allowsEmptyInput(type: string): boolean {\n  if (type === C.TYPE_STRING_OR_NULL || type === C.TYPE_TIMEOUT_OR_NULL\n    || type === C.TYPE_TEMPLATE_URL_PASS || type === C.TYPE_TEMPLATE_URL_USER_PASS) {\n    return true;\n  }\n  return false;\n}\n\nexport function renderInput(type: string, defaultValue: string,\n  value: string, onValueChange: (value: string) => void): JSX.Element {\n  switch (type) {\n    case C.TYPE_REGEX:\n    case C.TYPE_STRING:\n    case C.TYPE_STRING_OR_NULL:\n    case C.TYPE_TIMEOUT:\n    case C.TYPE_TIMEOUT_OR_NULL:\n    case C.TYPE_TEMPLATE_URL_PASS:\n    case C.TYPE_TEMPLATE_URL_USER_PASS: {\n      let onChangeCallback = (e: React.ChangeEvent<HTMLInputElement>) => {\n        onValueChange(e.target.value);\n      }\n      return <input value={value} onChange={onChangeCallback}\n        placeholder={defaultValue} />\n    }\n    default:\n      console.error(`Unknown type: \"${type}\"`)\n      return <div>ERROR: Unknown input type</div>;\n  }\n}\n\nexport function checkInput(type: string, value: string): string | null {\n  if (!allowsEmptyInput(type) && !value) {\n    return \"Empty field is not allowed\";\n  }\n  switch (type) {\n    case C.TYPE_STRING:\n    case C.TYPE_STRING_OR_NULL: {\n      return null;\n    }\n    case C.TYPE_TIMEOUT_OR_NULL:\n    case C.TYPE_TIMEOUT: {\n      if (type === C.TYPE_TIMEOUT_OR_NULL && !value) {\n        return null;\n      }\n      return checkTimingStringForErrors(value);\n    }\n    case C.TYPE_TEMPLATE_URL_PASS:\n    case C.TYPE_TEMPLATE_URL_USER_PASS: {\n      let placeholders = [C.PLACEHOLDER_PASSWORD];\n      if (type === C.TYPE_TEMPLATE_URL_USER_PASS) {\n        placeholders.push(C.PLACEHOLDER_USERNAME);\n      }\n      return checkUrlForPlaceholders(value, placeholders);\n    }\n    case C.TYPE_REGEX: {\n      return checkRegex(value);\n    }\n    default:\n      console.error(`Unknown type: \"${type}\"`)\n      return \"Internal error: unknown type\";\n  }\n}\n\nfunction checkTimingStringForErrors(value: string): string | null {\n  let number = Number(value);\n  if (isNaN(number)) {\n    return \"Not a valid number\";\n  }\n  if (number < 0) {\n    return \"Number can not be negative\";\n  }\n  return null;\n}\n\nfunction checkUrlForPlaceholders(urlText: string, placeholders: string[]) {\n  try {\n    new URL(urlText);\n  } catch (e) {\n    // console.debug(\"This error is probably related to url parsing\", e);\n    return \"Unvalid URL format\";\n  }\n\n  for (let p of placeholders) {\n    if (urlText.indexOf(p) < 0) {\n      return `The url should contain the placeholder \"${p}\"`;\n    }\n  }\n  return null;\n}\n\nfunction checkRegex(value: string): string | null {\n  try {\n    new RegExp(value);\n    return null;\n  } catch (e) {\n    return \"Not a valid regular expression\";\n  }\n}\n","import * as C from '../redux/constants';\n\n\nexport interface SettingsInfo {\n  title: string,\n  name: string,\n  description: string,\n  type: string,\n}\n\nconst HOSTNAME: SettingsInfo = {\n  title: \"Hostname\",\n  name: \"hostname\",\n  description: \"The hostname of the Kali Linux. It is shown on the login screen.\",\n  type: C.TYPE_STRING,\n};\n\nconst GRUB_GREETER_DURATION: SettingsInfo = {\n  title: \"Grub greeting message\",\n  name: \"grubGreetingDuration\",\n  description: \"Defines how long the 'Welcome to GRUB!' message is shown\",\n  type: C.TYPE_TIMEOUT,\n};\n\nconst KERNEL_DURATION: SettingsInfo = {\n  title: \"Kernel load\",\n  name: \"kernelLoadDuration\",\n  description: \"Defines how long to wait after the 'Loading Linux <your_kernel_version_here> ...' line\",\n  type: C.TYPE_TIMEOUT,\n};\n\nconst INITRD_DURATION: SettingsInfo = {\n  title: \"Initial ramdisk load\",\n  name: \"initrdLoadDuration\",\n  description: \"Defines how long to wait after the 'Loading initial ramdisk ...' line\",\n  type: C.TYPE_TIMEOUT,\n};\n\nconst BOOT_LOGO_DURATION: SettingsInfo = {\n  title: \"Kali boot animation\",\n  name: \"plymountDuration\",\n  description: \"Determines how long the boot animation should be shown\",\n  type: C.TYPE_TIMEOUT,\n};\n\nconst SHUTDOWN_LOGO_DURATIION: SettingsInfo = {\n  title: \"Kali logo during shutdown\",\n  name: \"shutdownDuration\",\n  description: \"Sets how long the kali logo is shown before the computer is shut down\",\n  type: C.TYPE_TIMEOUT,\n};\n\nconst GRUB_TIMEOUT: SettingsInfo = {\n  title: \"Grub timeout\",\n  name: \"bootTimeout\",\n  description: \"If the user does not press a key after X seconds, the first boot menu entry gets executed automatically\",\n  type: C.TYPE_TIMEOUT_OR_NULL,\n};\n\nconst CRYPT_DEVICE: SettingsInfo = {\n  title: \"Crypt device (root partition)\",\n  name: \"cryptDevice\",\n  description: \"The name of the encrypted partition. Setting this option will cause the decrypt disk screen to be shown\",\n  type: C.TYPE_STRING_OR_NULL,\n};\n\nconst INITIAL_SCREEN: SettingsInfo = {\n  title: \"Initial screen\",\n  name: \"initialScreen\",\n  description: \"Select which state the computer should start in\",\n  type: C.TYPE_INITIAL_SCREEN,\n};\n\nconst CHECK_DECRYPT_PASS_URL: SettingsInfo = {\n  title: \"Check disk password URL\",\n  name: \"checkDecryptionPasswordUrl\",\n  description: \"The URL to send a request to when the user tries to decrypt the disk\",\n  type: C.TYPE_TEMPLATE_URL_PASS,\n};\n\nconst CHECK_LOGIN_URL: SettingsInfo = {\n  title: \"Check login URL\",\n  name: \"checkLoginCredentialsUrl\",\n  description: \"The URL to send a request to when the user tries to log in\",\n  type: C.TYPE_TEMPLATE_URL_USER_PASS,\n};\n\nconst URL_VERIFICATION_TIMEOUT: SettingsInfo = {\n  title: \"Server verification timeout\",\n  name: \"serverRequestTimeout\",\n  description: \"How long to wait for a response from the server, before falling \" +\n    \"back on the regular expression check. Setting the value too high can cause a visible delay \" +\n    \"if the server is not reachable / responding\",\n  type: C.TYPE_TIMEOUT,\n};\n\nconst REGEX_DECRYPT_PASSWORD: SettingsInfo = {\n  title: \"Decryption password\",\n  name: \"validDecryptionPasswordRegex\",\n  description: \"Accept the disk password if it matches this regular expression\",\n  type: C.TYPE_REGEX,\n};\n\nconst REGEX_LOGIN_USERNAME: SettingsInfo = {\n  title: \"Login username\",\n  name: \"validLoginUsernameRegex\",\n  description: \"Accept the login username if it matches this regular expression\",\n  type: C.TYPE_REGEX,\n};\n\nconst REGEX_LOGIN_PASSWORD: SettingsInfo = {\n  title: \"Login password\",\n  name: \"validLoginPasswordRegex\",\n  description: \"Accept the login password if it matches this regular expression\",\n  type: C.TYPE_REGEX,\n};\n\n\nexport const FIELDS_TIMING = [GRUB_GREETER_DURATION, KERNEL_DURATION,\n  INITRD_DURATION, BOOT_LOGO_DURATION, SHUTDOWN_LOGO_DURATIION];\nexport const FIELDS_GENERAL = [HOSTNAME, INITIAL_SCREEN, GRUB_TIMEOUT, CRYPT_DEVICE];\nexport const FIELDS_CREDENTIAL_SERVER = [CHECK_DECRYPT_PASS_URL, CHECK_LOGIN_URL,\n  URL_VERIFICATION_TIMEOUT];\nexport const FIELDS_CREDENTIAL_LOCAL = [REGEX_DECRYPT_PASSWORD, REGEX_LOGIN_USERNAME,\n  REGEX_LOGIN_PASSWORD];\n\nconst ALL_SETTINGS = [...FIELDS_GENERAL, ...FIELDS_TIMING,\n...FIELDS_CREDENTIAL_SERVER, ...FIELDS_CREDENTIAL_LOCAL];\n\nexport const SETTINGS_MAP = new Map<string, SettingsInfo>();\nfor (let s of ALL_SETTINGS) {\n  SETTINGS_MAP.set(s.name, s);\n}\n","import { ReduxConstants, DEFAULT_CONSTANTS } from '../redux/store';\nimport { SETTINGS_MAP } from './SettingInfos';\nimport { checkInput } from './Types';\n\nexport interface Settings {\n  // server verification\n  checkLoginCredentialsUrl: string,\n  checkDecryptionPasswordUrl: string,\n  serverRequestTimeout: string,\n  // local verification\n  validLoginUsernameRegex: string,\n  validLoginPasswordRegex: string,\n  validDecryptionPasswordRegex: string,\n\n  [key: string]: string,\n}\n\nexport function asSettings(constants: ReduxConstants): Settings {\n  return {\n    // server verification\n    checkLoginCredentialsUrl: fromStringOrNull(constants.checkLoginCredentialsUrl),\n    checkDecryptionPasswordUrl: fromStringOrNull(constants.checkDecryptionPasswordUrl),\n    serverRequestTimeout: fromNumber(constants.serverRequestTimeout),\n    // local verification\n    validLoginUsernameRegex: fromRegex(constants.validLoginUsernameRegex),\n    validLoginPasswordRegex: fromRegex(constants.validLoginPasswordRegex),\n    validDecryptionPasswordRegex: fromRegex(constants.validDecryptionPasswordRegex),\n  };\n}\n\nfunction fromNumber(value: number): string {\n  return \"\" + value;\n}\n\nfunction fromStringOrNull(value: string | null): string {\n  return value || \"\";\n}\n\n// function fromNumberOrNull(value: number | null): string {\n//   return value ? \"\" + value : \"\";\n// }\n\nfunction fromRegex(value: RegExp): string {\n  return value.source;\n}\n\nexport function isValid(settings: Settings): boolean {\n  for (let [key, value] of Object.entries(settings)) {\n    let info = SETTINGS_MAP.get(key);\n    if (info) {\n      let errorMessage = checkInput(info.type, value);\n      if (errorMessage) {\n        let message = `The value you supplied for \"${key}\" is not valid!`;\n        console.log(message);\n        return false;\n      }\n    } else {\n      console.warn(`No input verification defined for \"${key}\"`);\n    }\n  }\n  return true;\n}\n\nexport function parseSettings(settings: Settings): ReduxConstants {\n  let constants = { ...DEFAULT_CONSTANTS };\n  //credentials\n  constants.checkDecryptionPasswordUrl = stringOrNull(settings.checkDecryptionPasswordUrl);\n  constants.checkLoginCredentialsUrl = stringOrNull(settings.checkLoginCredentialsUrl);\n  constants.serverRequestTimeout = Number(settings.serverRequestTimeout);\n  return constants;\n}\n\nfunction stringOrNull(value: string): string | null {\n  return value ? value : null;\n}\n\n// function numberOrNull(value: string): number | null {\n//   return value ? Number(value) : null;\n// }\n\nexport function parseUrl(settings: Settings) {\n  // edit a copy\n  settings = { ...settings };\n  // read url (hash) params\n  // if hash has \"setup=skip\": immediately start the simulation\n  let hash = window.location.hash;\n  if (hash) {\n    let setup;\n    let params = new URLSearchParams(hash.substr(1));\n    for (let [key, value] of params.entries()) {\n      value = decodeURIComponent(value);\n      if (value === \"null\") {\n        value = \"\";\n      }\n      if (key === \"setup\") {\n        setup = value; //if multiple definitions: only keep the last value\n      } else {\n        if (settings[key] !== undefined) {\n          console.log(`Using url parameter: ${key} -> ${value}`);\n          settings[key] = value;\n        } else {\n          console.warn(`Unknown url parameter: ${key}`);\n        }\n      }\n    }\n    return {\n      settings: settings,\n      skipSetup: setup === \"skip\"\n    };\n  }\n  return null;\n}\n","import React from 'react';\nimport { ReduxConstants, DEFAULT_CONSTANTS } from '../redux/store';\nimport { initialSetup } from '../redux/actions';\nimport * as C from '../redux/constants';\nimport Setting from './Setting';\nimport { Settings } from './State';\nimport { renderInput, checkInput, allowsEmptyInput } from './Types';\nimport { isValid, parseSettings, asSettings, parseUrl } from './State';\nimport {\n  SettingsInfo, FIELDS_GENERAL, FIELDS_TIMING,\n  FIELDS_CREDENTIAL_SERVER, FIELDS_CREDENTIAL_LOCAL\n} from './SettingInfos';\n\nconst DEFAULT_SETTINGS = asSettings(DEFAULT_CONSTANTS);\n\n\nclass SetupView extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      settings: asSettings(props.constants),\n    };\n  }\n\n  componentDidMount() {\n    let parsed = parseUrl(this.state.settings);\n    if (parsed) {\n      this.setState({ settings: parsed.settings });\n      // if (parsed.skipSetup) {\n      //   console.log(\"Trying to skip setup\");\n      //   this.start(parsed.settings, false);\n      // }\n    }\n  }\n\n  getParamString() {\n    let params = [];\n    for (let [key, value] of Object.entries(this.state.settings)) {\n      value = encodeURIComponent(value);\n      if (value === \"\") {\n        value = \"null\";\n      }\n      params.push(`${key}=${value}`);\n    }\n    return params.join(\"&\");\n  }\n\n  render() {\n    return <div className=\"setup\">\n      <h1>Setup</h1>\n      Here you can configure the Kali Linux simulation. Or just skip this step by\n      pressing the <code>Start</code> button.\n      Fields marked with a \"{C.MARKER_CAN_BE_LEFT_EMPTY}\" can be left empty to diable said feature.\n\n      <button onClick={() => this.start(this.state.settings, true)}>Skip setup</button>\n\n      <h2>General settings</h2>\n      {this.renderSettings(FIELDS_GENERAL)}\n\n      <h2>Timing settings</h2>\n      All values below are measured in seconds. Negative values are not allowed.\n      {this.renderSettings(FIELDS_TIMING)}\n\n      <h2>Credential settings</h2>\n      These settings can be used to specify the credentials that a user can use to sucessfully \"log in\".\n      They can also be used to extract the user credentials (via the url fields).\n      {this.renderSettings(FIELDS_CREDENTIAL_SERVER)}\n\n      <h2>Local credential verification</h2>\n      If the server defined above can not be reached or does not respond in time,\n       these fields will be used to verify the credentials. The fields accept\n       regular expressions, which are a powerful way to match text.\n       If you are not familiar with them go check out this\n       <a href=\"https://www.computerhope.com/unix/regex-quickref.htm\">\n        quick start guide to regular expressions\n       </a>.\n       {this.renderSettings(FIELDS_CREDENTIAL_LOCAL)}\n\n      <button onClick={() => this.start(this.state.settings, true)}>Start</button>\n    //TODO add reset to defaults button\n    </div>\n  }\n\n  renderSettings(list: SettingsInfo[]) {\n    return <div className=\"settings\">\n      {list.map(this.renderGenericSetting)}\n    </div>\n  }\n\n  renderGenericSetting = (setting: SettingsInfo) => {\n    let value = this.state.settings[setting.name];\n    let defaultValue = DEFAULT_SETTINGS[setting.name];\n    let errorMessage = checkInput(setting.type, value);\n    let canBeEmpty = allowsEmptyInput(setting.type);\n    let onChangeCallback = (newValue: string) => {\n      let copy = { ...this.state.settings };\n      copy[setting.name] = newValue;\n      this.setState({ settings: copy });\n    }\n\n    return <Setting key={setting.name} name={setting.title}\n      canBeEmpty={canBeEmpty} errorMessage={errorMessage} description={setting.description}>\n      {renderInput(setting.type, defaultValue, value, onChangeCallback)}\n    </Setting>\n  }\n\n  start(settings: Settings, alertOnError: boolean) {\n    if (isValid(settings)) {\n      let constants = parseSettings(settings);\n      window.location.hash = \"\";\n      initialSetup(constants);\n      return true;\n    } else {\n      if (alertOnError) {\n        alert(\"Please check your inputs. At least one of them has an invalid value\");\n      }\n      return false;\n    }\n  }\n}\n\n\ninterface State {\n  settings: Settings,\n}\n\ninterface Props {\n  constants: ReduxConstants,\n}\n\nexport default SetupView;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { ReduxState, ReduxConstants, DEFAULT_CONSTANTS } from './redux/store';\nimport * as C from './redux/constants';\nimport {initialSetup, } from './redux/actions';\nimport FullscreenManager from './FullscreenManager';\nimport ScreenManager from './win10/ScreenManager';\nimport ScreenCover from './ScreenCover';\nimport Setup from './setup/Setup';\nimport { PreloadImages } from './Images';\nimport '../css/App.scss';\n\n// TODOs\n// --- Nice to have ---\n// Disable autofill on password fields (in Firefox)\n// Build my own clock, that does not create error messages in the console\n\nclass App extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {};\n    (this as any).debugIsInitialized = false;\n  }\n\n  render() {\n    return <div className=\"app\">\n      <PreloadImages />\n      <FullscreenManager alwaysShowContents={true}>\n        {this.renderContent()}\n      </FullscreenManager>\n    </div>\n  }\n\n  renderContent() {\n    if (C.DEBUG){\n      if (!(this as any).debugIsInitialized){\n        (this as any).debugIsInitialized = true;\n        initialSetup(DEFAULT_CONSTANTS);\n      }\n      return <ScreenManager />\n    } else {\n      if (this.props.showSetup) {\n        return <Setup constants={this.props.constants} />\n      } else {\n        let showKali = this.props.isRunning && this.props.isFullscreen;\n        return showKali ? <ScreenManager /> : <ScreenCover />;\n      }\n    }\n  }\n}\n\ninterface State {\n}\n\ninterface Props {\n  isRunning: boolean,\n  showSetup: boolean,\n  isFullscreen: boolean,\n  constants: ReduxConstants,\n}\n\nconst mapStateToProps = (state: ReduxState, ownProps: any) => {\n  return {\n    ...ownProps,\n    isRunning: !state.var.isFinished,\n    isFullscreen: state.fullscreen.active,\n    showSetup: !state.isSetupDone,\n    constants: state.const,\n  };\n};\n\nconst ReduxApp = connect(mapStateToProps)(App);\nexport default ReduxApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\nimport App from './app/App';\nimport { store } from './app/redux/store';\nimport { onHistoryPopState } from './app/redux/actions';\n\nwindow.addEventListener('popstate', (event) => {\n  if (!event.state || !event.state.stage) {\n    //Go to setup\n    onHistoryPopState(false);\n  } else {\n    // go to simulation\n    onHistoryPopState(true);\n  }\n  console.log(\"[Event: popstate] state: \" + JSON.stringify(event.state));\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}